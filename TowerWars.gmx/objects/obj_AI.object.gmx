<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//AI object takes control of one set of bases and distributes commands
//  based on the proposed logic

//bases to control
control = 0;

//enemy bases
enemy = 0;

//rate at which the AI makes moves (in frames)
move_rate = room_speed*4;

//matrix of moves (explained more in alarm0)
move_matrix = 0;

//matrix of decisions ((explained more in alarm0)
decision_matrix = 0;

//execute an AI command every alarm0 execution
alarm[0] = move_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_matrix = 0;
decision_matrix = 0;

//move_matrix holds all possible links
//  each control base to each enemy base
//  each control base to each empty base
//  each control base to each other control base
//  example: 2 control bases, 2 enemy bases, 2 empty bases
//  [base1,enemy1]
//  [base1,enemy2]
//  [base2,enemy1]
//  [base2,enemy2]
//  [base1,empty1]
//  [base1,empty2]
//  [base2,empty1]
//  [base2,empty2]
//  [base1, base1]
//  [base1, base2]
//  [base2, base1]
//  [base2, base2]

//build move_matrix for enemies
for(i = 0; i &lt; instance_number(control); i++)
{
    n = instance_number(enemy);
    c = instance_find(control, i);
    
    for(ii = 0; ii &lt; n; ii++)
    {
        index = i*n + ii;
        move_matrix[index,0] = c;
        move_matrix[index,1] = instance_find(enemy,ii);
    }
}

//remember last array index
last = array_height_2d(move_matrix);

//build move_matrix for empty bases
for(i = 0; i &lt; instance_number(control); i++)
{
    n = instance_number(obj_emptyBase);
    c = instance_find(control, i);

    for(ii = 0; ii &lt; n; ii++)
    {
        index = last + i*n + ii
        move_matrix[index,0] = c;
        move_matrix[index,1] = instance_find(obj_emptyBase,ii);
    }
}

//remember last array index
last = array_height_2d(move_matrix);

//build move_matrix for each other
for(i = 0; i &lt; instance_number(control); i++)
{
    n = instance_number(control);
    c = instance_find(control, i);

    for(ii = 0; ii &lt; n; ii++)
    {
        index = last + i*n + ii
        move_matrix[index,0] = c;
        move_matrix[index,1] = instance_find(control,ii);
    }
}


//decision_matrix stores the value of each move as well as the index where that move
//  resides in the move_matrix

//controls the length of the decision_matrix ensuring that redundant moves are not considered
modifier = 0;

for(i = 0; i &lt; array_height_2d(move_matrix); i++)
{
    source = move_matrix[i,0];
    target = move_matrix[i,1];
    
    //only consider moves from bases that are unlocked and source != target    
    if (not source.locked &amp;&amp; source != target)
    {
        //calculate potential casulaties from making a move, negative number is bad
        casualties = source.total_pawns - target.total_pawns;
        //calculate the distance between the target and the source
        distance = point_distance(source.x, source.y, target.x, target.y);
        
        //factor for attacking enemy bases instead of reinforcing bases
        if(source.ofType != target.ofType) attack_factor = 500 else attack_factor = 100;
        
        //calculate the value of making the move based on calculated factors
        decision_matrix[i - modifier, 0] = casualties - distance/10 + attack_factor;
        //store the index of the move from the decision matrix
        decision_matrix[i - modifier, 1] = i;     
    }
    else modifier += 1;    
}

//traverse the decision matrix to find the highest valued move
best = 0;
b = 0;
for(i = 1; i &lt; array_height_2d(decision_matrix); i++)
{
    if (decision_matrix[i,0] &gt; decision_matrix[b,0])
    {
        b = i;
        best = decision_matrix[i,1];
    }
}

//if at least 1 move exists
if (array_height_2d(decision_matrix) != 0)
{
    //assign best source and target
    best_source = move_matrix[best,0];
    best_target = move_matrix[best,1];
    
    //calculate the percentage required to overtake the base
    percentage = (best_target.total_pawns / best_source.total_pawns) + 0.1
    
    
    if (percentage &gt; 1) percentage = 1;
    
    amount = percentage*best_source.total_pawns;
    
    //execute a move command
    execute_move(best_source, best_target, amount);
}

alarm[0] = move_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
