<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Upgrade System///
level = 1;
///////////////////

//speed at which the pawn is travelling
pawn_speed = 2;

//How fast pawns are gathered during a click and hold event
gather_rate = 3;

//The base is eligible for an upgrade
upgradeEligible = false;

//Number of pawns required to upgrade
upgradeCost = 100;

//holds true if the base has been clicked on
chosen = false;

//holds true if the user is click and holding over the base to gather pawns
poweringUp = false;
//if true the base explodes upon being built as an enemy base
//  instead of converting
explodingBase = false;
//holds true if the base has been captured before
captured = false;

//number of pawns at the base
total_pawns = 200;


//target = 0;
//enemy = 0;


//type of pawn that hurts this base
enemy_pawn = 0;

//type of pawn produced by this base
pawn = 0;

//this type of base, later used to convert the empty base
ofType = 0;

//rate at which this base spawns pawns
spawn_rate = 26;

//rate at which this base deploys pawns
deploy_rate = 2;

//holds the current building progress of the base
build = 0;

//maximum number of spawns this base spawns up to, it can hold more than
//  the cap but no more pawns will be produced
cap = 500;

//holds the current value of pawns to deploy
curValue = 0;

//varible for modifying how fast the base builds based on the number of pawns
build_mod = 500;

//no building goes on if no pawns present
if (total_pawns &lt;= 0)
{
    build_rate = 0;
}
else 
{
    build_rate = ceil(build_mod/total_pawns);
}

//alarm 2 goes off every build_rate to build more of the base
alarm[2] = build_rate;

//locked base cannot be issued orders, currently a base becomes unlocked when it is built
locked = true;

//used in double click
t=current_second;//Get the second


/////////////////////////////////////////////////////////////
//Particle system, do not touch
Sname = part_system_create()
particle1 = part_type_create();
part_type_shape(particle1,pt_shape_line);
part_type_size(particle1,0.10,0.27,0,0);
part_type_scale(particle1,3.94,2.25);
part_type_color3(particle1,5927752,1918774,5885983);
part_type_alpha3(particle1,0.55,0.53,0.03);
part_type_speed(particle1,2.42,3.27,0.12,0);
part_type_direction(particle1,0,359,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,1);
part_type_life(particle1,32,53);
emitter1 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
//part_emitter_stream(Sname,emitter1,particle1,50);
/////////////////////////////////////////////////////////////


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_burst(Sname,emitter1,particle1,50);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//build the base until complete, then set the alarm0 to spawn pawns
if(build = 100)
{
    locked = false;
    randomize();
    alarm[0] = floor(random_range(spawn_rate - 25, spawn_rate));
}
else
{
    build += 1;
    alarm[2] = build_rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//on execution add a pawn if the cap hasn't been reached yet
if (total_pawns &lt; cap)
{
    total_pawns += 1;
}
//reset the alarm
alarm[0] = floor(random_range(spawn_rate - 2, spawn_rate));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//every step re-evaluate the build rate based on current number of pawns
if (total_pawns &lt;= 0)
{
    build_rate = 0;
}
else 
{
    build_rate = ceil(build_mod/total_pawns);
    
    //decrease the alarm2 to match the current build rate
    if (build_rate &lt; alarm[2]) alarm[2] = build_rate;
}

//upon reaching 0 pawns, convert to an empty base
if(total_pawns &lt;= 0)
{

    instance_change(obj_emptyBase,true);
    
}

//increase the current value of pawns to deploy if the user is click
// and holding on the base
if(poweringUp)
{
    curValue += gather_rate;
}

//amount to deploy cannot be more than total pawns at the base
if (curValue &gt; total_pawns)
{
    curValue = total_pawns;
}

//handles the exploding bases, upon being rebuilt if the base
// is an exploding base and it has been captured, destroy it
if(not locked)
{
    if(explodingBase &amp;&amp; captured)
    {
        instance_destroy();
    }
}

//change the image index depending on what the current build value is
if (build == 100 &amp;&amp; total_pawns &gt; upgradeCost)
{
    upgradeEligible = true;
    image_index = 59;
}
else
{
    upgradeEligible = false;
    image_index = ceil((58/100)*build);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>locked</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (chosen)
{  
    //execute mouse_target script to get the target
    target = mouse_target(mouse_x, mouse_y, id);
    
    //if the target is found execute_move script
    if (target != 0)
    {
        execute_move(source, target, curValue);
    }
    chosen = false;
}

poweringUp = false;
curValue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stop gathering pawns once the mouse leaves the base
poweringUp = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>locked</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if unlcoked
chosen = true;
poweringUp = true;

//track mouse click and hold globally
global.chosen = true;

global.start_x = x;
global.start_y = y;

curValue += gather_rate;

if(current_second-t=0){//If the time has not changed
    //global.upgradeBase = id;
    //instance_activate_object(ui_upgradeStore);
    
    if(upgradeEligible) 
    {
        event_user(0);
    }
}else{
    t=current_second;//If the time has changed get the second
    //global.upgradeBase = 0;
    //instance_deactivate_object(ui_upgradeStore);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//UPGRADE BASE
total_pawns -= upgradeCost;

level += 1;

upgradeCost += 25;

cap += 25;
pawn_speed += 0.1;

if (level &gt;= 5) deploy_rate = 1; else deploy_rate = 2;

//if (level &gt;= 4) gather_rate = 2; else gather_rate = 2;

if (spawn_rate &gt; 10) spawn_rate -= 1;

if (build_mod &gt; 50) build_mod -= 50;

build = 0;
locked = true;
build_rate = ceil(build_mod/total_pawns);
alarm[2] = build_rate;
curValue = 0;
chosen = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>526</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_font</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>12</kind>
            <font>font_ui</font>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw total pawns, inside base
draw_text(x,y - 10,string(total_pawns));
//draw build, overhead of the base
//draw_text(x,y - 45,string(build));

if (chosen)
{
    //draw the amount to deploy above the mouse
    draw_text(mouse_x,mouse_y - 40,string(curValue));
}

draw_set_color(c_red);
if (global.upgradeBase == id)
{
    draw_circle(x,y,32,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
