<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hp is currently not in use
hp = 5;

//enemy/friendly "obj_base", this is so the pawn knows to either inflict damage or heal
//  the target on impact. To be set in child pawn objects
enemy = 0;
friendly = 0;

//obj_base where the pawn originates and where it seeks to go
source = 0;
target = 0;

//these points are slightly offset through a randomizer to give pawn movement
//  more of a swarm effect than a linear movement to a single point
end_x = 0;
end_y = 0;

//in the even that the target object is destroyed pawns must return back to source
retreating = false;

//speed determines how fast a pawn moves towards the target each frame
speed = 2;

image_xscale = 0.2;
image_yscale = 0.2;

///////////////////////////////////////
//Particle system, do not touch
Sname = part_system_create();
particle1 = part_type_create();
part_type_shape(particle1,pt_shape_line);
part_type_size(particle1,0.10,0.27,0,0);
part_type_scale(particle1,3.94,2.25);
part_type_color3(particle1,16512,128,255);
part_type_alpha3(particle1,0.55,0.53,0.03);
part_type_speed(particle1,2.42,3.27,0.12,0);
part_type_direction(particle1,0,359,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,1);
part_type_life(particle1,2,5);
emitter1 = part_emitter_create(Sname);

//part_emitter_stream(Sname,emitter1,particle1,5);
///////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//particle effect upon death
part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
part_emitter_burst(Sname, emitter1, particle1, 5); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the target no longer exists go into retreat mode, set target to source
if (not instance_exists(target) and not retreating)
{
    end_x = source.x + random_range(-25,25);
    end_y = source.y + random_range(-25,25);
    target = source;
    retreating = true;
}

//every frame make a move towards end_x and end_y
move_towards_point(end_x, end_y, speed);

//change the direction of the pawn to face the end_point
direction = point_direction(x, y, end_x, end_y);
image_angle = direction;

//hp is not currently in use
if (hp &lt;= 0) 
{    
    instance_destroy();
}

//upon reaching target a decision must be made to what effect the pawn has on obj_base
if (place_meeting(x,y, target))
{     
    //take away 1 pawn from an enemy base 
    if (target.ofType == enemy)
    {
        target.total_pawns -= 1;
    }
    //give one pawn to a friendly base
    else if(target.ofType == friendly)
    {
        target.total_pawns += 1;
    }
    //if not enemy or friendly then this must be an empty base
    //if there are more than 0 pawns then this base must be brought down before
    //it can be taken over
    else if(target.total_pawns &gt; 0)
    {
        target.total_pawns -= 1;
    }
    //upon hitting an empty base with 0 pawns trigger the take over
    else
    {
        //set of the alarm1 from obj_emptyBase which triggers the capture
        //  sequence
        target.alarm[1] = 1;
        //change the ofType of obj_emptyBase to the friendly type of the pawn
        //  which is what it will convert to
        target.ofType = friendly;
        //add a pawn to the new conqured base
        target.total_pawns += 1;
    }
    
    //destroy after encounter with target
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
