<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>baseNumber = persistentData.baseNumber
emptyBaseNumber = persistentData.emptyBaseNumber;
AIdif = persistentData.AIdif;
startingPawns = 1000;

enemy_array = 0;

if (((baseNumber - emptyBaseNumber) mod 2) != 0) emptyBaseNumber -= 1;

for (i = 0; i &lt; emptyBaseNumber; i++)
{
    randomize();
    cx = random_range(40, room_width - 40);
    cy = random_range(40, room_height - 40);
    
    place = true;
    for(ii = 0; ii &lt; array_length_1d(enemy_array); ii++)
    {
        if(point_distance(cx,cy,enemy_array[ii].x,enemy_array[ii].y) &lt; 80)
        {
            place = false;
        }
    }
    
    if (place)
    {
        p = instance_create(cx, cy, obj_emptyBase);
        p.total_pawns = 20;
        enemy_array[i] = p;
    }
    else
    {
        i = i - 1;
    }    
}

last = array_length_1d(enemy_array);

for (i = last; i &lt; last + ceil((baseNumber - emptyBaseNumber)/2); i++)
{
    randomize();
    cx = random_range(40, room_width - 40);
    cy = random_range(40, room_height - 40);
    
    place = true;
    for(ii = 0; ii &lt; array_length_1d(enemy_array); ii++)
    {
        if(point_distance(cx,cy,enemy_array[ii].x,enemy_array[ii].y) &lt; 80)
        {
            place = false;
        }
    }
    
    if (place)
    {
        p = instance_create(cx, cy, obj_team1Base);
        p.total_pawns = startingPawns;
        p.build = 100;
        enemy_array[i] = p;
    }
    else
    {
        i = i - 1;
    }    
}

last = array_length_1d(enemy_array);

for (i = last; i &lt; last + floor((baseNumber - emptyBaseNumber)/2); i++)
{
    randomize();
    cx = random_range(40, room_width - 40);
    cy = random_range(40, room_height - 40);
    
    place = true;
    for(ii = 0; ii &lt; array_length_1d(enemy_array); ii++)
    {
        if(point_distance(cx,cy,enemy_array[ii].x,enemy_array[ii].y) &lt; 80)
        {
            place = false;
        }
    }
    
    if (place)
    {
        p = instance_create(cx, cy, obj_team2Base);
        p.total_pawns = startingPawns;
        p.build = 100;
        enemy_array[i] = p;
    }
    else
    {
        i = i - 1;
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
